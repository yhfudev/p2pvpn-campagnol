.\" Begin/end an indented schematic
.de BDRAWING
.  ft CR
.  in +7n
.  nf
..
.de EDRAWING
.  fi
.  in -7n
.  ft
..
.\" write a parameter name, its argument and default value
.de PARAMETER
\fB\\$1\fR = \fI\\$2\fR
.  ie !"\\$3"" \{\
\fIoptional\fR, default: \fI\\$3\fR
.  \}
.  el \{\
\fImandatory\fR
.  \}
..
.\" campagnol.conf path
.ds filename @sysconfdir@/campagnol.conf
.TH CAMPAGNOL.CONF 5 "November 29, 2008" "@version@"
.SH NAME
campagnol.conf - Campagnol VPN client configuration file
.SH SYNOPSIS
.I \*[filename]
.SH DESCRIPTION
.BR campagnol (8)
reads its configuration datas from
.I \*[filename]
(or another file specified in the command line).
.PP
This file has an INI-like syntax. Section names are written between square
brackets []. Comments start with a \[oq];\[cq] or a \[oq]#\[cq]
and continue to the end of the line.
Values may be quoted between double quotation marks and special characters can
be escaped with 
\[oq]\\\[cq]
(\\\\, \\n, \\# ...). The white-spaces around the section names,
the parameters and their values are stripped. All names are case sensitive.
.PP
A \[oq]\\\[cq] at the end of the value is treated as a line continuation. It is
removed and the parser continue to read the value with the next line. Quoted
values can also extend to several lines.
.PP
.ft CR
.nf
[SOME_SECTION]
  param        = value        # comment
  other_param  = a few words
  quoted_value = "some chars \\t\\"\\#  "


[MULTILINE 1]
# The following definitions are equivalent
a = "aze rty uio"
b = "aze"\\
    " rty "\\
    "uio"
c = aze\\
    " rty "\\
    uio
d = "aze\\
 rty \\
uio"


[MULTILINE 2]
# The following definitions are equivalent
a = "aze\\n  rty\\n uio"
b = "aze
  rty
 uio"
c = "aze\\n"\\
    "  rty\\n"\\
    " uio"
.fi
.ft
.PP
Inside a section, the syntax
.I ${param}
can be used to reference another value (param) from the same section. For example:
.PP
.ft CR
.nf
[SECURITY]
basedir = "/etc/campagnol_certs"
certificate = ${basedir}/cert.pem  # expands to
                                   # "/etc/campagnol_certs/cert.pem"
key = ${basedir}/key.pem           # expands to
                                   # "/etc/campagnol_certs/key.pem"
.fi
.ft
.PP
The configuration file defines the following sections:
.PP
.RS
.TP 13n
.B [NETWORK]
The public network-related options like the rendezvous server address or the
MTU.
.TP
.B [VPN]
This section defines the IP address and netmask used on the VPN.
.TP
.B [SECURITY]
All the DTLS-related parameters.
.TP
.B [CLIENT]
This section is used to adjust the client's behavior.
.TP
.B [UP]
This section is optional and defines the commands executed to configure the TUN device.
.TP
.B [DOWN]
This section is optional and defines the commands executed when the TUN device is closed.
.RE
.SH PARAMETERS
This is a list of all the available parameters, with their default value if they are optional and their expected format.
.\" *** NETWORK ***
.SS [NETWORK] section
.TP 15n
.PARAMETER local_host "[IP address or hostname]" "search for a non local IP"
.IP
This parameter set the local IP address used by campagnol.
If it is left undefined, the local IP address will firstly be searched with the 
.B interface
parameter. If
.B interface
is not set, the IP address will be the first non local IP found. Setting this
parameter to \[lq]0.0.0.0\[rq]
will work but it is not compatible with the
.B use_local_addr
option.
.TP
.PARAMETER local_port "[port number]" "no port binding"
.IP
Bind the local UDP socket to this port number.
.TP
.PARAMETER server_host "[IP address or hostname]"
.IP
The rendezvous server hostname or IP address.
.TP
.PARAMETER server_port "[port number]"
.IP
The rendezvous server port.
.TP
.PARAMETER tun_mtu integer 1419
.IP
This parameter set the MTU of the TUN device. This value must be the same on
each clients.
.IP
It may be interesting to change the MTU of the tun device if you are running
campagnol on a network with a unusual MTU. The default value is the highest
value which should yield packets smaller than 1500 bytes (the usual MTU for
ethernet) whichever cipher algorithm is used. The optimal value depends on the
total overhead of campagnol. This is described in the source file
.IR "include/communication.h" .
.TP
.PARAMETER interface "[a network interface name]" "no interface binding"
.IP
If this parameter is defined, the UDP socket is bound to this interface
(Linux only). This parameter is also used to find the local IP address to use
if the 
.B local_host
parameter is not used.
.TP
.PARAMETER use_local_addr "[yes/no]" "yes"
.IP
This parameter allows the client to publish it's local IP and UDP port. It's
useful if this client and others clients of the VPN are behind a common NAT:
.IP
.BDRAWING
[peer A] ---|   |
            |NAT|---(net)-- [RDV]
[peer B] ---|   |
.EDRAWING
.IP
In this configuration and if this parameter is enabled, the two peers will use
their local IP and port to reach each other. Otherwhise they will use their
public address (as with the other clients of the VPN).
.IP
If peer A send a packet to peer B using its public address and port, the common
NAT needs to do UDP hairpin translation which is not a widely implemented
feature. By using the local address, the NAT doesn't need to do hairpin
translation so leaving this option to the default value is probably what most
users want.
.IP
If the VPN configuration involes peers behind multiple level of NAT, see the
next parameter
.BR override_local_addr .
Disable this option only if you know what you
are doing!
.TP
.PARAMETER override_local_addr "\[lq]IP port\[rq]" "not enabled"
.IP
This option is used to define the local IP that will be published to the
rendezvous server (if 
.B use_local_addr
is enabled). The format of the value is the IP address (or a hostname) and the
port number, separated by spaces.
.IP
This option is useful when peers are behind multiple level of NATs:
.IP
.BDRAWING
[peer A] ---|NAT_A|---|   |
                      |NAT|---(net)-- [RDV]
        [peer B] -----|   |
.EDRAWING
.IP
In this case, the two peers are behind a common NAT but A is also behind another
NAT. If A and B use their local IP to open a connection
.RB ( use_local_addr
enable), it will fail. If they use their public IP
.RB ( use_local_addr
disabled)
it will work only if the common NAT does UDP hairpin translation.
.IP
With this parameter, you can send a fake local address to the rendezvous server
instead of the real one. So another way to connect the two peers is to define a
static port forwarding for A on NAT_A and to use
.B override_local_addr
to publish
its intermediate IP address and port on NAT_A. When B tries to open a new
connection with A, it will now use its address on NAT_A.
.\" *** VPN ***
.SS [VPN] section
.TP 15n
.PARAMETER vpn_ip "[IP address]"
.IP
The IP address for the VPN.
.TP
.PARAMETER network "[netmask in CIDR notation]"
.IP
The subnetwork for the VPN. This value must be the same for all peers. It's
given using the CIDR notation, for example \[lq]10.0.0.0/24\[rq].
.\" *** SECURITY ***
.SS [SECURITY] section
.TP 15n
.PARAMETER certificate path
.IP
The PEM file containing the client's X.509 certificate.
.TP
.PARAMETER key path
.IP
The PEM file containing the client's private key.
.TP
.PARAMETER ca_certificates path none
.IP
The PEM file containing the root certificates chain in PEM format. This file can
contain several CA certificates. Also see the next parameter
.BR ca_certificates_dir .
.TP
.PARAMETER ca_certificates_dir path none
.IP
A directory containing the root certificates in PEM format. This directory must
be prepared with the \fBc_rehash\fR OpenSSL's utility. See
.BR SSL_CTX_load_verify_locations (3)
for a description of the format. At least one of
.BR ca_certificates " and " ca_certificates_dir
must be defined. If both are defined, 
.BR ca_certificates
is searched first.
.TP
.PARAMETER crl_file path none
.IP
A PEM file containing a certificate revocation list (CRL). When a new connection
is opened, the remote peer's certificate is checked against this CRL.
.TP
.PARAMETER verify_depth integer "9 (OpenSSL's default)"
.IP
This parameter defines the maximum depth for the certificate chain verification.
.TP
.PARAMETER cipher_list "[OpenSSL's cipher list]" "OpenSSL's default"
.IP
The OpenSSL ciphers lists to use. If this value is defined, then it must be the
same for every clients of the VPN, or at least the values must be compatible.
.BR openssl-ciphers (1)
explains the syntax for this parameter and how to determine a cipherlist.
.\" *** CLIENT ***
.SS [CLIENT] section
.TP 15n
.PARAMETER fifo_size integer 50
.IP
The client uses one FIFO per connected peer. Each FIFO requires roughly N*2000
bytes in memory.
.TP
.PARAMETER client_max_rate float "not enabled"
.IP
This option allows to limit the outgoing traffic for the whole client. The value
is in kilobytes/seconds. If this parameter is commented out or set to 0, it
is disabled.
.TP
.PARAMETER connection_max_rate float "not enabled"
.IP
This option allows to limit the outgoing traffic for each connection to other
peers. The value is in kilobytes/seconds. If this parameter is commented out or
set to 0, it is disabled.
.TP
.PARAMETER timeout integer "120 seconds"
.IP
This set the inactivity timeout before closing a session. The value is given in
seconds. It's better to ensure that all the clients share the same value for
this option.
.TP
.PARAMETER keepalive integer "10 seconds"
.IP
This set the interval the client waits before sending a keepalive message to
another client when the connection is inactive. This is required to maintain the
contexts of the involved NATs and firewalls.
.TP
.PARAMETER max_clients integer 100
.IP
The maximum number of simultaneously opened connections with other clients.
.\" *** UP ***
.SS [UP] section
This section is optional. It defines the programs that are launched to configure
the TUN device. It should be used to run ifconfig, set the MTU, add a route,
open som port on the firewall...
.PP
If the section is not defined, campagnol will execute some plateform-dependent
default commands to setup the interface, its MTU and add a route. If it is
empty, then no command are executed.
.PP
The order of execution of the shell commands is defined by their keys wich are
sorted with 
.BR strcmp (3).
.PP
The following special variables are available:
.RS
.TP 8n
.B %D
the TUN device
.TP
.B %V
the VPN IP, as defined in the
.BR [VPN]
section.
.TP
.B %M
the MTU of the TUN device, as defined in the
.BR [NETWORK]
section
.TP
.B %I
the local IP
.TP
.B %P
the local UDP port
.TP
.B %N
the netmask of the VPN, as defined in the
.BR [VPN]
section.
.TP
.B %%
the \[oq]%\[cq] character
.RE
.PP
The following example corresponds to the default shell commands for Linux.
.PP
.ft CR
.nf
[UP]
01 = "ifconfig %D %V mtu %M up"
02 = "ip route replace %N via %V || route add -net %N gw %V"
.fi
.ft
.PP
This is the default commands for FreeBSD:
.PP
.ft CR
.nf
01 = "ifconfig %D inet %V %V mtu %M up"
02 = "route add -net %N %V"
.fi
.ft
.PP
This is the default commands for OpenBSD. Note that you do not need to manually
set the MTU with ifconfig for OpenBSD.
.PP
.ft CR
.nf
01 = "ifconfig %D inet %V %V up"
02 = "route add -net %N %V"
.fi
.ft
.\" *** DOWN ***
.SS [DOWN] section
This section is optional. It has the same syntax than the
.BR [UP]
section but it defines the shell commands that are executed when the TUN device is
closed. The same special variables are available.
.PP
The default for Linux and OpenBSD is to execute nothing.
.PP
The following corresponds to the default for FreeBSD. We need to explicitely
close the TUN device with ifconfig:
.PP
.ft CR
.nf
[DOWN]
01 = "ifconfig %D destroy"
.fi
.ft
.SH SEE ALSO
.BR campagnol (8),
.BR campagnol_rdv (8),
.BR openssl-ciphers (1)
.SH AUTHORS
Florent Bondoux <fbondoux@users.sourceforge.net>
