/**
 * Show the VPN status
 * 
 * Copyright (C) 2008 Florent Bondoux
 * 
 * This file is part of Campagnol.
 *
 * Campagnol is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Campagnol is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Campagnol.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

import java.util.Iterator;
import java.util.Vector;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author  florent
 */
public class CampagnolGUI extends javax.swing.JFrame {
    public ClientsTableModel clients;
    public ConnectionsTableModel connections;
    
    /** Creates new form CampagnolGUI */
    public CampagnolGUI(Vector clientsVector, Vector connexionsVector) {
        this.clients = new ClientsTableModel(clientsVector);
        this.connections = new ConnectionsTableModel(connexionsVector);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel = new javax.swing.JPanel();
        jButtonRefresh = new javax.swing.JButton();
        jSplitPane = new javax.swing.JSplitPane();
        jScrollPaneClients = new javax.swing.JScrollPane();
        jTableClients = new javax.swing.JTable();
        jScrollPaneConnexions = new javax.swing.JScrollPane();
        jTableConnections = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Campagnol RDV");
        jPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jPanel.add(jButtonRefresh);

        getContentPane().add(jPanel, java.awt.BorderLayout.SOUTH);

        jSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane.setLastDividerLocation(-1);
        jSplitPane.setOneTouchExpandable(true);
        jScrollPaneClients.setPreferredSize(new java.awt.Dimension(800, 200));
        jTableClients.setModel(this.clients);
        jScrollPaneClients.setViewportView(jTableClients);

        jSplitPane.setLeftComponent(jScrollPaneClients);

        jScrollPaneConnexions.setPreferredSize(new java.awt.Dimension(800, 200));
        jTableConnections.setModel(this.connections);
        jScrollPaneConnexions.setViewportView(jTableConnections);

        jSplitPane.setRightComponent(jScrollPaneConnexions);

        getContentPane().add(jSplitPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        this.update();
    }//GEN-LAST:event_jButtonRefreshActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JPanel jPanel;
    private javax.swing.JScrollPane jScrollPaneClients;
    private javax.swing.JScrollPane jScrollPaneConnexions;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JTable jTableClients;
    private javax.swing.JTable jTableConnections;
    // End of variables declaration//GEN-END:variables
    
    public void update() {
        this.clients.updateData();
        this.connections.updateData();
    }
}

/**
 * Table model used to show the registered clients
 */
class ClientsTableModel extends AbstractTableModel {
    private String[] columnNames = {"VPN IP", "Real IP", "Port", "Registration date", "timeout"};
    private Object[][]data = null;
    private Vector clients;
    
    public ClientsTableModel(Vector clients) {
        super();
        this.clients = clients;
    }
    
    public int getRowCount() {
        if (this.data != null) {
            return this.data.length;
        }
        else {
            return 0;
        }
    }

    public int getColumnCount() {
        return this.columnNames.length;
    }

    public Object getValueAt(int rowIndex, int columnIndex) {
        if (this.data != null && rowIndex < this.data.length) {
            return this.data[rowIndex][columnIndex];
        }
        else {
            return null;
        }
    }
    
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return false;
    }

    public String getColumnName(int column) {
        return this.columnNames[column];
    }

    public Class getColumnClass(int columnIndex) {
        switch (columnIndex) {
            case 0:
                return String.class;
            case 1:
                return String.class;
            case 2:
                return Integer.class;
            case 3:
                return String.class;
            case 4:
                return Boolean.class;
            default:
                return Object.class;
        }
    }
    
    public void updateData() {
        this.data = new Object[clients.size()][this.getColumnCount()];
        int n=0;
        Iterator it = clients.iterator();
        while (it.hasNext()) {
            ClientStruct cl = (ClientStruct) it.next();
            data[n][0] = cl.vpnIPString;
            data[n][1] = MsgServStruct.unMapAddress(cl.realIP);
            data[n][2] = new Integer(cl.port);
                data[n][3] = cl.getStartTime();
            data[n][4] = new Boolean(cl.isTimeout());
            n++;
        }
        this.fireTableDataChanged();
    }
}


/**
 * Table model used to show the connections
 */
class ConnectionsTableModel extends AbstractTableModel {
    private String[] columnNames = {"DTLS client", "DTLS server", "Creation date"};
    private Object[][] data = null;
    private Vector connections;
    
    public ConnectionsTableModel(Vector connections) {
        super();
        this.connections = connections;
    }
    
    public int getRowCount() {
        if (this.data != null) {
            return this.data.length;
        }
        else {
            return 0;
        }
    }

    public int getColumnCount() {
        return this.columnNames.length;
    }

    public Object getValueAt(int rowIndex, int columnIndex) {
        if (this.data != null && rowIndex < this.data.length) {
            return this.data[rowIndex][columnIndex];
        }
        else {
            return null;
        }
    }
    
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return false;
    }

    public String getColumnName(int column) {
        return this.columnNames[column];
    }

    public Class getColumnClass(int columnIndex) {
        return String.class;
    }
    
    public void updateData() {
        this.data = new Object[connections.size()][this.getColumnCount()];
        int n=0;
        Iterator it = connections.iterator();
        while (it.hasNext()) {
            Connection ct = (Connection) it.next();
            data[n][0] = ct.client1.vpnIPString;
            data[n][1] = ct.client2.vpnIPString;
            data[n][2] = ct.getStartTime();
            n++;
        }
        this.fireTableDataChanged();
    }
}
